version: 2

default_machine_config: &default_machine_config
  machine:
    enabled: true
    docker_layer_caching: true
  working_directory: ~/kubernetes-monitor

default_container_config: &default_container_config
  docker:
    - image: circleci/node:10
  working_directory: ~/kubernetes-monitor

python_container_config: &python_container_config
  docker:
    - image: circleci/python:3
  working_directory: ~/kubernetes-monitor

staging_branch_only_filter: &staging_branch_only_filter
  filters:
    branches:
      only:
        - staging

main_branches_filter: &main_branches_filter
  filters:
    branches:
      ignore:
        - staging
        - master

jobs:
######################## PR OR MERGE TO STAGING ########################
  package_manager_test_apk:
    <<: *default_machine_config
    steps:
      - checkout
      - run:
          name: APK Test
          command: |
            export NVM_DIR="/opt/circleci/.nvm" &&
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" &&
            nvm install v10 &&
            npm install &&
            export IMAGE_TAG=$([[ "$CIRCLE_BRANCH" == "staging" ]] && echo "staging-candidate" || echo "discardable") &&
            export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=snyk/kubernetes-monitor:${IMAGE_TAG}-${CIRCLE_SHA1} &&
            docker pull ${KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG} &&
            npm run test:apk
      - run:
          name: Notify Slack on failure
          command: |
            if [[ "$CIRCLE_BRANCH" == "staging" ]]; then
              ./scripts/slack-notify-failure.sh "staging-apk-tests-${CIRCLE_SHA1}"
            else
              echo "Current branch is $CIRCLE_BRANCH so skipping notifying Slack"
            fi
          when: on_fail

  package_manager_test_apt:
    <<: *default_machine_config
    steps:
      - checkout
      - run:
          name: APT Test
          command: |
            export NVM_DIR="/opt/circleci/.nvm" &&
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" &&
            nvm install v10 &&
            npm install &&
            export IMAGE_TAG=$([[ "$CIRCLE_BRANCH" == "staging" ]] && echo "staging-candidate" || echo "discardable") &&
            export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=snyk/kubernetes-monitor:${IMAGE_TAG}-${CIRCLE_SHA1} &&
            docker pull ${KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG} &&
            npm run test:apt
      - run:
          name: Notify Slack on failure
          command: |
            if [[ "$CIRCLE_BRANCH" == "staging" ]]; then
              ./scripts/slack-notify-failure.sh "staging-apt-tests-${CIRCLE_SHA1}"
            else
              echo "Current branch is $CIRCLE_BRANCH so skipping notifying Slack"
            fi
          when: on_fail

  package_manager_test_rpm:
    <<: *default_machine_config
    steps:
      - checkout
      - run:
          name: RPM Test
          command: |
            export NVM_DIR="/opt/circleci/.nvm" &&
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" &&
            nvm install v10 &&
            npm install &&
            export IMAGE_TAG=$([[ "$CIRCLE_BRANCH" == "staging" ]] && echo "staging-candidate" || echo "discardable") &&
            export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=snyk/kubernetes-monitor:${IMAGE_TAG}-${CIRCLE_SHA1} &&
            docker pull ${KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG} &&
            npm run test:rpm
      - run:
          name: Notify Slack on failure
          command: |
            if [[ "$CIRCLE_BRANCH" == "staging" ]]; then
              ./scripts/slack-notify-failure.sh "staging-rpm-tests-${CIRCLE_SHA1}"
            else
              echo "Current branch is $CIRCLE_BRANCH so skipping notifying Slack"
            fi
          when: on_fail

  build_image:
    <<: *default_machine_config
    steps:
      - checkout
      - run:
          name: BUILD IMAGE
          command: |
            docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD} &&
            export IMAGE_TAG=$([[ "$CIRCLE_BRANCH" == "staging" ]] && echo "staging-candidate" || echo "discardable") &&
            IMAGE_NAME_CANDIDATE=snyk/kubernetes-monitor:${IMAGE_TAG}-${CIRCLE_SHA1} &&
            ./scripts/build-image.sh ${IMAGE_NAME_CANDIDATE} &&
            docker push ${IMAGE_NAME_CANDIDATE}
      - run:
          name: Notify Slack on failure
          command: |
            if [[ "$CIRCLE_BRANCH" == "staging" ]]; then
              ./scripts/slack-notify-failure.sh "staging-build-image-${CIRCLE_SHA1}"
            else
              echo "Current branch is $CIRCLE_BRANCH so skipping notifying Slack"
            fi
          when: on_fail

  build_operator:
    <<: *default_machine_config
    steps:
      - checkout
      - run:
          name: DOWNLOAD OPERATOR-SDK
          command: |
            RELEASE_VERSION=v0.15.1
            DOWNLOAD_LOCATION=./operator-sdk
            CURL_FOLLOW_REDIRECTS="-L"
            curl ${CURL_FOLLOW_REDIRECTS} https://github.com/operator-framework/operator-sdk/releases/download/${RELEASE_VERSION}/operator-sdk-${RELEASE_VERSION}-x86_64-linux-gnu -o ${DOWNLOAD_LOCATION}
            chmod +x ${DOWNLOAD_LOCATION}
      - run:
          name: CREATE OPERATOR AND PUSH OPERATOR IMAGE TO DOCKERHUB
          command: |
            export IMAGE_TAG=$([[ "$CIRCLE_BRANCH" == "staging" ]] && echo "staging-candidate" || echo "discardable")
            export SNYK_MONITOR_IMAGE_TAG="${IMAGE_TAG}-${CIRCLE_SHA1}"
            export SNYK_OPERATOR_IMAGE_NAME_AND_TAG="snyk/kubernetes-operator:${SNYK_MONITOR_IMAGE_TAG}"
            ./scripts/create-operator.sh "${SNYK_OPERATOR_IMAGE_NAME_AND_TAG}" "${SNYK_MONITOR_IMAGE_TAG}"
            docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD}
            docker push ${SNYK_OPERATOR_IMAGE_NAME_AND_TAG}
      - run:
          name: PACKAGE OPERATOR
          command: |
            export IMAGE_TAG=$([[ "$CIRCLE_BRANCH" == "staging" ]] && echo "staging-candidate" || echo "discardable")
            export SNYK_MONITOR_IMAGE_TAG="${IMAGE_TAG}-${CIRCLE_SHA1}"
            export SNYK_OPERATOR_VERSION="0.0.1"
            export SNYK_OPERATOR_IMAGE_TAG="${SNYK_MONITOR_IMAGE_TAG}"
            ./scripts/package-operator.sh "${SNYK_OPERATOR_VERSION}" "${SNYK_OPERATOR_IMAGE_TAG}" "${SNYK_MONITOR_IMAGE_TAG}"
      - run:
          name: Notify Slack on failure
          command: |
            if [[ "$CIRCLE_BRANCH" == "staging" ]]; then
              ./scripts/slack-notify-failure.sh "staging-build-operator-${CIRCLE_SHA1}"
            else
              echo "Current branch is $CIRCLE_BRANCH so skipping notifying Slack"
            fi
          when: on_fail

  unit_tests:
    <<: *default_machine_config
    steps:
      - checkout
      - run:
          name: UNIT TESTS
          command: |
            export NVM_DIR="/opt/circleci/.nvm" &&
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" &&
            nvm install v10 &&
            npm install &&
            npm run lint &&
            npm run build &&
            npm run test:unit
      - run:
          name: Notify Slack on failure
          command: |
            if [[ "$CIRCLE_BRANCH" == "staging" ]]; then
              ./scripts/slack-notify-failure.sh "staging-unit-tests-${CIRCLE_SHA1}"
            else
              echo "Current branch is $CIRCLE_BRANCH so skipping notifying Slack"
            fi
          when: on_fail
  
  system_tests:
    <<: *default_machine_config
    steps:
      - checkout
      - run:
          name: SYSTEM TESTS
          command: |
            export NVM_DIR="/opt/circleci/.nvm" &&
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" &&
            nvm install v10 &&
            npm install &&
            npm run build &&
            npm run test:system
      - run:
          name: Notify Slack on failure
          command: |
            if [[ "$CIRCLE_BRANCH" == "staging" ]]; then
              ./scripts/slack-notify-failure.sh "staging-system-tests-${CIRCLE_SHA1}"
            else
              echo "Current branch is $CIRCLE_BRANCH so skipping notifying Slack"
            fi
          when: on_fail

  integration_tests:
    <<: *default_machine_config
    steps:
      - checkout
      - run:
          name: INTEGRATION TESTS
          command: |
            export NVM_DIR="/opt/circleci/.nvm" &&
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" &&
            nvm install v10 &&
            npm install &&
            docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD} &&
            export IMAGE_TAG=$([[ "$CIRCLE_BRANCH" == "staging" ]] && echo "staging-candidate" || echo "discardable") &&
            export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=snyk/kubernetes-monitor:${IMAGE_TAG}-${CIRCLE_SHA1} &&
            docker pull ${KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG} &&
            npm run test:integration
      - run:
          name: Notify Slack on failure
          command: |
            if [[ "$CIRCLE_BRANCH" == "staging" ]]; then
              ./scripts/slack-notify-failure.sh "staging-integration-tests-${CIRCLE_SHA1}"
            else
              echo "Current branch is $CIRCLE_BRANCH so skipping notifying Slack"
            fi
          when: on_fail

  eks_integration_tests:
    <<: *default_machine_config
    steps:
      - checkout
      - run:
          name: INTEGRATION TESTS EKS
          command: |
            export NVM_DIR="/opt/circleci/.nvm" &&
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" &&
            nvm install v10 &&
            npm install &&
            docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD} &&
            export IMAGE_TAG=$([[ "$CIRCLE_BRANCH" == "staging" ]] && echo "staging-candidate" || echo "discardable") &&
            export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=snyk/kubernetes-monitor:${IMAGE_TAG}-${CIRCLE_SHA1} &&
            docker pull ${KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG} &&
            .circleci/do-exclusively --branch staging --job ${CIRCLE_JOB} npm run test:integration:eks
      - run:
          name: Notify Slack on failure
          command: |
            if [[ "$CIRCLE_BRANCH" == "staging" ]]; then
              ./scripts/slack-notify-failure.sh "staging-eks-integration-tests-${CIRCLE_SHA1}"
            else
              echo "Current branch is $CIRCLE_BRANCH so skipping notifying Slack"
            fi
          when: on_fail

  openshift4_integration_tests:
    <<: *default_machine_config
    steps:
      - checkout
      - run:
          name: APPEND AN ENTRY TO THE TEST ENVIRONMENT TO /ETC/HOSTS
          command: |
            echo "${OPENSHIFT4_ETC_HOSTS_ENTRY}" | sudo tee -a /etc/hosts
      - run:
          name: INTEGRATION TESTS OPENSHIFT 4
          command: |
            export NVM_DIR="/opt/circleci/.nvm" &&
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" &&
            nvm install v10 &&
            npm install &&
            docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD} &&
            export IMAGE_TAG=$([[ "$CIRCLE_BRANCH" == "staging" ]] && echo "staging-candidate" || echo "discardable") &&
            export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=snyk/kubernetes-monitor:${IMAGE_TAG}-${CIRCLE_SHA1} &&
            docker pull ${KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG} &&
            .circleci/do-exclusively --branch staging --job ${CIRCLE_JOB} npm run test:integration:openshift4
      - run:
          name: Notify Slack on failure
          command: |
            if [[ "$CIRCLE_BRANCH" == "staging" ]]; then
              ./scripts/slack-notify-failure.sh "staging-openshift4-integration-tests-${CIRCLE_SHA1}"
            else
              echo "Current branch is $CIRCLE_BRANCH so skipping notifying Slack"
            fi
          when: on_fail

  preview_release_notes:
    <<: *python_container_config
    steps:
      - checkout
      - run:
          name: SEND RELEASE NOTES PREVIEW TO SLACK
          command: ./scripts/post-release-notes-preview.py

######################## MERGE TO STAGING ########################
  tag_and_push:
    <<: *default_container_config
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: TAG AND PUSH
          command: |
            npm install &&
            docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD} &&
            unset CIRCLE_PULL_REQUEST &&
            unset CI_PULL_REQUEST &&
            unset CI_PULL_REQUESTS &&
            unset CIRCLE_PULL_REQUESTS &&
            npx semantic-release &&
            NEW_VERSION=`cat ./package.json | jq -r '.version'` &&
            ./scripts/approve-image.sh $NEW_VERSION
      - run:
          name: Notify Slack on failure
          command: ./scripts/slack-notify-failure.sh "staging-release"
          when: on_fail
  deploy_dev:
    <<: *default_container_config
    steps:
      - checkout
      - run:
          name: DEPLOY DEV
          command: |
            LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}` &&
            LATEST_TAG=${LATEST_TAG_WITH_V:1}-approved &&
            ./scripts/slack-notify-deploy.sh $LATEST_TAG dev &&
            curl -i -H "Accept: application/json" -H "Content-Type: application/json" \
                -X POST -d "{\"docker_sha\":\"${LATEST_TAG}\", \
                              \"commit_hash\":\"${CIRCLE_SHA1}\"}" \
                https://my.dev.snyk.io/${DEV_DEPLOY_TOKEN}
      - run:
          name: Notify Slack on failure
          command: ./scripts/slack-notify-failure.sh "deploy-dev"
          when: on_fail

######################## MERGE TO MASTER ########################
  publish:
    <<: *default_container_config
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: PUBLISH
          command: |
            LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}` &&
            LATEST_TAG=${LATEST_TAG_WITH_V:1} &&
            IMAGE_NAME_APPROVED=snyk/kubernetes-monitor:${LATEST_TAG}-approved &&
            IMAGE_NAME_PUBLISHED=snyk/kubernetes-monitor:${LATEST_TAG} &&
            docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD} &&
            docker pull ${IMAGE_NAME_APPROVED} &&
            docker tag ${IMAGE_NAME_APPROVED} ${IMAGE_NAME_PUBLISHED} &&
            docker push ${IMAGE_NAME_PUBLISHED} &&
            ./scripts/slack-notify-push.sh ${IMAGE_NAME_PUBLISHED} &&
            ./scripts/publish-gh-pages.sh ${LATEST_TAG}
      - run:
          name: Notify Slack on failure
          command: ./scripts/slack-notify-failure.sh "master"
          when: on_fail

  deploy_prod:
    <<: *default_container_config
    steps:
      - checkout
      - run:
          name: DEPLOY PROD
          command: |
            LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}` &&
            LATEST_TAG=${LATEST_TAG_WITH_V:1} &&
            ./scripts/slack-notify-deploy.sh $LATEST_TAG prod &&
            curl -i -H "Accept: application/json" -H "Content-Type: application/json" \
                -X POST -d "{}" \
                https://my.prod.snyk.io/${PROD_DEPLOY_TOKEN}
      - run:
          name: Notify Slack on failure
          command: ./scripts/slack-notify-failure.sh "deploy-prod"
          when: on_fail

#######################################################################

workflows:
  version: 2
  PR_TO_STAGING:
    jobs:
      - build_image:
          <<: *main_branches_filter
      - build_operator:
          <<: *main_branches_filter
      - unit_tests:
          <<: *main_branches_filter
      - system_tests:
          <<: *main_branches_filter
      - integration_tests:
          requires:
            - build_image
          <<: *main_branches_filter
      - package_manager_test_apk:
          requires:
            - build_image
          <<: *main_branches_filter
      - package_manager_test_apt:
          requires:
            - build_image
          <<: *main_branches_filter
      - package_manager_test_rpm:
          requires:
            - build_image
          <<: *main_branches_filter
      - preview_release_notes:
          requires:
            - build_image
            - unit_tests
            - system_tests
            - integration_tests
          <<: *main_branches_filter

  MERGE_TO_STAGING:
    jobs:
      - build_image:
          <<: *staging_branch_only_filter
      - build_operator:
          <<: *staging_branch_only_filter
      - unit_tests:
          <<: *staging_branch_only_filter
      - system_tests:
          <<: *staging_branch_only_filter
      - integration_tests:
          requires:
            - build_image
          <<: *staging_branch_only_filter
      - eks_integration_tests:
          requires:
            - build_image
          <<: *staging_branch_only_filter
      - openshift4_integration_tests:
          requires:
            - build_image
          <<: *staging_branch_only_filter
      - package_manager_test_apk:
          requires:
            - build_image
          <<: *staging_branch_only_filter
      - package_manager_test_apt:
          requires:
            - build_image
          <<: *staging_branch_only_filter
      - package_manager_test_rpm:
          requires:
            - build_image
          <<: *staging_branch_only_filter
      - tag_and_push:
          requires:
            - build_image
            - build_operator
            - unit_tests
            - system_tests
            - integration_tests
            - package_manager_test_apk
            - package_manager_test_apt
            - package_manager_test_rpm
          <<: *staging_branch_only_filter
      - deploy_dev:
          requires:
            - tag_and_push
          <<: *staging_branch_only_filter

  MERGE_TO_MASTER:
    jobs:
      - publish:
          filters:
            branches:
              only:
                - master
      - deploy_prod:
          requires:
            - publish
          filters:
            branches:
              only:
                - master
