commands:
    install_helm:
        description: Install Helm
        steps:
            - run:
                command: |
                    curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
                    chmod 700 get_helm.sh
                    ./get_helm.sh
                name: Install Helm
    install_python_requests:
        description: Install requests library
        steps:
            - run:
                command: |
                    sudo apt update
                    sudo apt install python3-requests
                when: always
jobs:
    security-scans:
        docker:
            - image: cimg/node:18.19.1
        steps:
            - checkout
            - prodsec/security_scans:
                mode: auto
                release-branch: master
                open-source-additional-arguments: --exclude=test
    aks_integration_tests:
        docker:
            - image: cimg/node:18.19.1
        resource_class: large
        steps:
            - checkout
            - setup_remote_docker
            - run:
                command: npm ci
            - install_python_requests
            - azure-cli/install
            - run:
                command: mkdir -p /tmp/logs/test/integration/aks
                name: Create temp dir for logs
            - run:
                command: |
                    export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)
                    .circleci/do-exclusively --branch staging --job ${CIRCLE_JOB} npm run test:integration:aks:yaml
                name: Integration tests AKS
            - run:
                command: |
                    ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
                name: Notify Slack on failure
                when: on_fail
            - store_artifacts:
                path: /tmp/logs/test/integration/aks
        working_directory: ~/kubernetes-monitor
    build_image:
        docker:
            - image: cimg/base:current
        steps:
            - checkout
            - setup_remote_docker
            - install_python_requests
            - run:
                command: |
                    IMAGE_TAG=$([[ "$CIRCLE_BRANCH" == "staging" ]] && echo "staging-candidate" || echo "discardable")
                    IMAGE_NAME_CANDIDATE=snyk/kubernetes-monitor:${IMAGE_TAG}-${CIRCLE_SHA1}
                    IMAGE_NAME_CANDIDATE_UBI9=snyk/kubernetes-monitor:${IMAGE_TAG}-ubi9-${CIRCLE_SHA1:0:8}
                    echo "export IMAGE_NAME_CANDIDATE=$IMAGE_NAME_CANDIDATE" >> $BASH_ENV
                    echo "export IMAGE_NAME_CANDIDATE_UBI9=$IMAGE_NAME_CANDIDATE_UBI9" >> $BASH_ENV
                name: Export environment variables
            - run:
                command: |
                    docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD}
                    ./scripts/docker/build-image.sh ${IMAGE_NAME_CANDIDATE}
                    ./scripts/docker/build-image-ubi9.sh ${IMAGE_NAME_CANDIDATE_UBI9}
                name: Build image
            - snyk/scan:
                additional-arguments: --project-name=alpine --policy-path=.snyk
                docker-image-name: ${IMAGE_NAME_CANDIDATE}
                monitor-on-build: false
                severity-threshold: high
                target-file: Dockerfile
            - snyk/scan:
                additional-arguments: --project-name=ubi9 --policy-path=.snyk
                docker-image-name: ${IMAGE_NAME_CANDIDATE_UBI9}
                monitor-on-build: false
                severity-threshold: critical
                target-file: Dockerfile.ubi9
            - run:
                command: |
                    docker push ${IMAGE_NAME_CANDIDATE}
                    docker push ${IMAGE_NAME_CANDIDATE_UBI9}
                name: Push image
            - run:
                command: |
                    ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
                name: Notify Slack on failure
                when: on_fail
        working_directory: ~/kubernetes-monitor
    code_formatter:
        docker:
            - image: cimg/node:18.19.1
        steps:
            - checkout
            - run:
                command: npm ci
            - install_python_requests
            - run:
                command: |
                    npm run format:check
                name: code formatter check
            - run:
                command: |
                    ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
                name: Notify Slack on failure
                when: on_fail
        working_directory: ~/kubernetes-monitor
    prepare_to_deploy:
        docker:
            - image: cimg/base:current
        steps:
            - checkout
            - install_python_requests
            - run:
                command: ./scripts/circleci-jobs/prepare_to_deploy.sh
                name: Deploy to dev
            - run:
                command: ./scripts/slack/notify_failure.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
                name: Notify Slack on failure
                when: on_fail
        working_directory: ~/kubernetes-monitor
    deploy_to_prod:
        docker:
            - image: cimg/base:current
        steps:
            - checkout
            - install_python_requests
            - run:
                command: ./scripts/circleci-jobs/deploy_to_prod.sh
                name: Deploy to prod
            - run:
                command: ./scripts/slack/notify_failure.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
                name: Notify Slack on failure
                when: on_fail
        working_directory: ~/kubernetes-monitor
    deploy_to_sysdig_integration_cluster:
        docker:
            - image: cimg/base:stable
        steps:
            - checkout
            - run:
                command: |
                    LATEST_KUBECTL_VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt)
                    curl -LO "https://dl.k8s.io/release/${LATEST_KUBECTL_VERSION}/bin/linux/amd64/kubectl"
                    curl -LO "https://dl.k8s.io/${LATEST_KUBECTL_VERSION}/bin/linux/amd64/kubectl.sha256"
                    echo "$(<kubectl.sha256) kubectl" | sha256sum --check
                    sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
                    # Ensure the kubectl command is runnable
                    kubectl version --client
                    # Prepare kubeconfig to point to the cluster
                    mkdir ~/.kube || true
                    printf "%s" "${SYSDIG_KUBECONFIG}" | base64 -d > ~/.kube/config
                name: Install and prepare kubectl
            - run:
                command: |
                    curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
                    chmod 700 get_helm.sh
                    ./get_helm.sh
                    # Ensure the Helm command is runnable
                    helm version
                name: Install Helm
            - run:
                command: |
                    LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}`
                    LATEST_TAG=${LATEST_TAG_WITH_V:1}-approved
                    ./scripts/slack/notify_deploy.py $LATEST_TAG sysdig-integration-cluster
                    helm upgrade --install snyk-monitor ./snyk-monitor --namespace snyk-monitor --set image.tag=${LATEST_TAG} --set clusterName="Sysdig cluster" --set sysdig.enabled=true
                name: Deploy to shared Sysdig cluster
            - run:
                command: ./scripts/slack/notify_failure.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
                name: Notify Slack on failure
                when: on_fail
        working_directory: ~/kubernetes-monitor
    eks_integration_tests:
        docker:
            - image: cimg/node:18.19.1
        resource_class: large
        steps:
            - checkout
            - setup_remote_docker
            - run:
                command: npm ci
            - install_python_requests
            - aws-cli/install:
                override-installed: true
            - run:
                command: mkdir -p /tmp/logs/test/integration/eks
                name: Create temp dir for logs
            - run:
                command: |
                    export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)
                    .circleci/do-exclusively --branch staging --job ${CIRCLE_JOB} npm run test:integration:eks:yaml
                name: Integration tests EKS
            - run:
                command: |
                    ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
                name: Notify Slack on failure
                when: on_fail
            - store_artifacts:
                path: /tmp/logs/test/integration/eks
        working_directory: ~/kubernetes-monitor
    integration_tests:
        docker:
            - image: cimg/node:18.19.1
        resource_class: large
        steps:
            - checkout
            - setup_remote_docker
            - run:
                command: npm ci
            - install_python_requests
            - run:
                command: mkdir -p /tmp/logs/test/integration/kind
                name: create temp dir for logs
            - run:
                command: |
                    export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)
                    npm run test:integration:kind:yaml
                name: Integration tests
            - run:
                command: |
                    ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
                name: Notify Slack on failure
                when: on_fail
            - store_artifacts:
                path: /tmp/logs/test/integration/kind
        working_directory: ~/kubernetes-monitor
    integration_tests_helm:
        docker:
            - image: cimg/node:18.19.1
        resource_class: large
        steps:
            - checkout
            - setup_remote_docker
            - run:
                command: npm ci
            - install_python_requests
            - run:
                command: mkdir -p /tmp/logs/test/integration/kind-helm
                name: Create temporary directory for logs
            - run:
                command: |
                    export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)
                    npm run test:integration:kind:helm
                name: Integration tests with Helm deployment
            - run:
                command: |
                    ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
                name: Notify Slack on failure
                when: on_fail
            - store_artifacts:
                path: /tmp/logs/test/integration/kind-helm
        working_directory: ~/kubernetes-monitor
    integration_tests_proxy:
        docker:
            - image: cimg/node:18.19.1
        resource_class: large
        steps:
            - checkout
            - setup_remote_docker
            - run:
                command: npm ci
            - install_python_requests
            - run:
                command: mkdir -p /tmp/logs/test/integration/proxy
                name: Create temporary directory for logs
            - run:
                command: |
                    export KUBERNETES_MONITOR_IMAGE_NAME_AND_TAG=$(./scripts/circleci-jobs/setup-integration-tests.py)
                    npm run test:integration:kind:proxy
                name: Integration tests with proxy
            - run:
                command: |
                    ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
                name: Notify Slack on failure
                when: on_fail
            - store_artifacts:
                path: /tmp/logs/test/integration/proxy
        working_directory: ~/kubernetes-monitor
    lint:
        docker:
            - image: cimg/node:18.19.1
        steps:
            - checkout
            - run:
                command: npm ci
            - install_python_requests
            - run:
                command: |
                    npm run lint
                name: lint
            - run:
                command: |
                    ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
                name: Notify Slack on failure
                when: on_fail
        working_directory: ~/kubernetes-monitor
    publish:
        docker:
            - image: cimg/node:18.19.1
        steps:
            - checkout
            - setup_remote_docker
            - install_python_requests
            - install_helm
            - run:
                command: |
                    LATEST_TAG_WITH_V=`git describe --abbrev=0 --tags ${CIRCLE_SHA1}`
                    LATEST_TAG=${LATEST_TAG_WITH_V:1}
                    IMAGE_NAME_APPROVED=snyk/kubernetes-monitor:${LATEST_TAG}-approved
                    IMAGE_NAME_PUBLISHED=snyk/kubernetes-monitor:${LATEST_TAG}
                    IMAGE_NAME_APPROVED_UBI9=snyk/kubernetes-monitor:${LATEST_TAG}-ubi9-approved
                    IMAGE_NAME_PUBLISHED_UBI9=snyk/kubernetes-monitor:${LATEST_TAG}-ubi9
                    echo "export LATEST_TAG=${LATEST_TAG}" >> $BASH_ENV
                    echo "export IMAGE_NAME_APPROVED=${IMAGE_NAME_APPROVED}" >> $BASH_ENV
                    echo "export IMAGE_NAME_PUBLISHED=${IMAGE_NAME_PUBLISHED}" >> $BASH_ENV
                    echo "export IMAGE_NAME_APPROVED_UBI9=${IMAGE_NAME_APPROVED_UBI9}" >> $BASH_ENV
                    echo "export IMAGE_NAME_PUBLISHED_UBI9=${IMAGE_NAME_PUBLISHED_UBI9}" >> $BASH_ENV
                name: Export environment variables
            - snyk/scan:
                additional-arguments: --project-name=alpine --policy-path=.snyk
                command: container test
                docker-image-name: ${IMAGE_NAME_APPROVED}
                fail-on-issues: true
                monitor-on-build: true
                severity-threshold: high
                target-file: Dockerfile
                token-variable: SNYK_TOKEN
            - snyk/scan:
                additional-arguments: --project-name=ubi9 --policy-path=.snyk
                command: container test
                docker-image-name: ${IMAGE_NAME_APPROVED_UBI9}
                fail-on-issues: true
                monitor-on-build: true
                severity-threshold: critical
                target-file: Dockerfile.ubi9
                token-variable: SNYK_TOKEN
            - run:
                command: |
                    docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD} &&
                    docker pull ${IMAGE_NAME_APPROVED} &&
                    docker tag ${IMAGE_NAME_APPROVED} ${IMAGE_NAME_PUBLISHED} &&
                    docker push ${IMAGE_NAME_PUBLISHED} &&
                    docker pull ${IMAGE_NAME_APPROVED_UBI9} &&
                    docker tag ${IMAGE_NAME_APPROVED_UBI9} ${IMAGE_NAME_PUBLISHED_UBI9} &&
                    docker push ${IMAGE_NAME_PUBLISHED_UBI9} &&
                    ./scripts/slack/notify_push.py ${IMAGE_NAME_PUBLISHED} &&
                    ./scripts/slack/notify_push.py ${IMAGE_NAME_PUBLISHED_UBI9} &&
                    ./scripts/publish-gh-pages.sh ${LATEST_TAG}
                name: Publish
            - run:
                command: ./scripts/slack/notify_failure.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
                name: Notify Slack on failure
                when: on_fail
        working_directory: ~/kubernetes-monitor
    system_tests:
        machine:
            docker_layer_caching: true
            image: default
        steps:
            - checkout
            - run:
                command: npm ci
            - install_python_requests
            - run:
                command: |
                    export DEBIAN_FRONTEND=noninteractive
                    sudo apt-get update -qq
                    sudo apt-get install skopeo
                name: Install Skopeo
            - run:
                command: |
                    npm run build &&
                    npm run test:system
                name: System tests
            - run:
                command: |
                    ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
                name: Notify Slack on failure
                when: on_fail
        working_directory: ~/kubernetes-monitor
    tag_and_push:
        docker:
            - image: cimg/node:18.19.1
        steps:
            - checkout
            - setup_remote_docker
            - install_python_requests
            - run:
                command: |
                    npm ci &&
                    docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD} &&
                    unset CIRCLE_PULL_REQUEST &&
                    unset CI_PULL_REQUEST &&
                    unset CI_PULL_REQUESTS &&
                    unset CIRCLE_PULL_REQUESTS &&
                    npx semantic-release@17.2.2 &&
                    NEW_VERSION=`cat ./package.json | jq -r '.version'` &&
                    ./scripts/docker/approve-image.sh $NEW_VERSION
                name: Tag and push
            - run:
                command: ./scripts/slack/notify_failure.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
                name: Notify Slack on failure
                when: on_fail
        working_directory: ~/kubernetes-monitor
    unit_tests:
        docker:
            - image: cimg/node:18.19.1
        steps:
            - checkout
            - run:
                command: npm ci
            - install_python_requests
            - run:
                command: |
                    npm run build &&
                    npm run test:unit
                name: Unit tests
            - run:
                command: |
                    ./scripts/slack/notify_failure_on_branch.py "${CIRCLE_BRANCH}" "${CIRCLE_JOB}" "${CIRCLE_BUILD_URL}" "${CIRCLE_PULL_REQUEST}" "${SLACK_WEBHOOK}"
                name: Notify Slack on failure
                when: on_fail
        working_directory: ~/kubernetes-monitor
main_branches_filter:
    filters:
        branches:
            ignore:
                - staging
                - master
master_branch_only_filter:
    filters:
        branches:
            only:
                - master
orbs:
    aws-cli: circleci/aws-cli@2.0.6
    azure-cli: circleci/azure-cli@1.2.0
    prodsec: snyk/prodsec-orb@1.1
    snyk: snyk/snyk@2

staging_branch_only_filter:
    filters:
        branches:
            only:
                - staging
version: 2.1
workflows:
    MERGE_TO_MASTER:
        jobs:
            - security-scans:
                name: Security Scans
                context:
                    - analysis_test-enrichment
                filters:
                    branches:
                        only:
                            - master
            - publish:
                context:
                    - team-container-integration
                    - analysis_test-enrichment
                requires:
                    - Security Scans
                filters:
                    branches:
                        only:
                            - master
            - deploy_to_prod:
                filters:
                    branches:
                        only:
                            - master
                requires:
                    - publish
    MERGE_TO_STAGING:
        jobs:
            - build_image:
                context: analysis_test-enrichment
                filters:
                    branches:
                        only:
                            - staging
            - unit_tests:
                context: analysis_test-enrichment
                filters:
                    branches:
                        only:
                            - staging
            - system_tests:
                filters:
                    branches:
                        only:
                            - staging
            - tag_and_push:
                context: team-container-integration
                filters:
                    branches:
                        only:
                            - staging
                requires:
                    - build_image
                    - unit_tests
                    - system_tests
            - prepare_to_deploy:
                context: team-container-integration
                filters:
                    branches:
                        only:
                            - staging
                requires:
                    - tag_and_push
    PR_TO_STAGING:
        jobs:
            - prodsec/secrets-scan:
                name: Scan repository for secrets
                trusted-branch: main
                context:
                    - snyk-bot-slack
                channel: snyk-on-snyk-analysis_test-enrichment
                filters:
                    branches:
                        ignore:
                            - staging
                            - master
            - security-scans:
                name: Security Scans
                context:
                    - analysis_test-enrichment
                filters:
                    branches:
                        ignore:
                            - staging
                            - master
            - build_image:
                context: analysis_test-enrichment
                requires:
                    - Scan repository for secrets
                    - Security Scans
                filters:
                    branches:
                        ignore:
                            - staging
                            - master
            - unit_tests:
                context: analysis_test-enrichment
                filters:
                    branches:
                        ignore:
                            - staging
                            - master
            - lint:
                filters:
                    branches:
                        ignore:
                            - staging
                            - master
            - code_formatter:
                filters:
                    branches:
                        ignore:
                            - staging
                            - master
            - system_tests:
                filters:
                    branches:
                        ignore:
                            - staging
                            - master
