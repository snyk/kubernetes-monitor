apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "snyk-monitor.name" . }}
  labels:
    app.kubernetes.io/name: {{ include "snyk-monitor.name" . }}
    helm.sh/chart: {{ include "snyk-monitor.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  {{- if .Values.pvc.enabled }}
  strategy:
    type: Recreate
  {{- else }}
  strategy:
    type: {{ .Values.strategy.type }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "snyk-monitor.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "snyk-monitor.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        {{- with .Values.metadata.labels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.metadata.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
    {{- with .Values.podSecurityContext }}
    securityContext:
    {{- $fsGroupOverride := dict }}
    {{- if hasKey $.Values.securityContext "fsGroup" }}
    {{- $fsGroupOverride = dict "fsGroup" (int $.Values.securityContext.fsGroup) }}
    {{- end }}
    {{- merge $fsGroupOverride . | toYaml | nindent 8 }}
    {{- else }}
    {{- if .Values.securityContext.fsGroup }}
    securityContext:
      fsGroup: {{ int .Values.securityContext.fsGroup }}
    {{- end }}
    {{- end }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: "kubernetes.io/arch"
                  operator: In
                  values:
                    {{- if .Values.nodeAffinity.kubernetesIoArch }}
                      {{- with .Values.nodeAffinity.kubernetesIoArch }}
                        {{- toYaml . | nindent 20 }}
                      {{- end }}
                    {{- else }}
                      ["amd64"]
                    {{- end }}
                - key: "kubernetes.io/os"
                  operator: In
                  values:
                    {{- if .Values.nodeAffinity.kubernetesIoOs }}
                      {{- with .Values.nodeAffinity.kubernetesIoOs }}
                        {{- toYaml . | nindent 20 }}
                      {{- end }}
                    {{- else }}
                      ["linux"]
                    {{- end }}
                {{- if not .Values.nodeAffinity.disableBetaArchNodeSelector }}
                - key: "beta.kubernetes.io/arch"
                  operator: In
                  values:
                    {{- if .Values.nodeAffinity.kubernetesIoArch }}
                      {{- with .Values.nodeAffinity.kubernetesIoArch }}
                        {{- toYaml . | nindent 20 }}
                      {{- end }}
                    {{- else }}
                      ["amd64"]
                    {{- end }}
                - key: "beta.kubernetes.io/os"
                  operator: In
                  values:
                    {{- if .Values.nodeAffinity.kubernetesIoOs }}
                      {{- with .Values.nodeAffinity.kubernetesIoOs }}
                        {{- toYaml . | nindent 20 }}
                      {{- end }}
                    {{- else }}
                      ["linux"]
                    {{- end }}
                {{- end }}
      serviceAccountName: {{ include "snyk-monitor.name" . }}
      restartPolicy: Always
      {{- if .Values.initContainers.enabled }}
      initContainers:
        - name: volume-permissions
          image: "{{ .Values.initContainerImage.repository }}:{{ .Values.initContainerImage.tag }}"
          command: ['sh', '-c', 'chmod -R go+rwX /var/tmp || true']
          volumeMounts:
            - name: temporary-storage
              mountPath: "/var/tmp"
          resources:
            requests:
              cpu: "100m"
              memory: "100Mi"
            limits:
              cpu: "100m"
              memory: "100Mi"
          securityContext:
            privileged: false
            runAsNonRoot: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
        {{- if .Values.extraInitContainers -}}
        {{ tpl (toYaml .Values.extraInitContainers) . | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: {{ include "snyk-monitor.name" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - name: docker-config
            readOnly: true
            mountPath: "/srv/app/.docker"
          - name: temporary-storage
            mountPath: "/var/tmp"
          - name: ssl-certs
            mountPath: "/srv/app/certs"
          - name: workload-policies
            mountPath: "/tmp/policies"
            readOnly: true
          - name: registries-conf
            mountPath: "/srv/app/.config/containers"
          {{- if .Values.excludedNamespaces }}
          - name: excluded-namespaces
            mountPath: "/etc/config"
          {{- end }}
          {{- if .Values.extraVolumeMounts }}
          {{- toYaml .Values.extraVolumeMounts | nindent 10 }}
          {{- end }}
          env:
          - name: NODE_EXTRA_CA_CERTS
            value: {{ .Values.extraCaCerts }}
          - name: SNYK_INTEGRATION_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Values.monitorSecrets }}
                key: integrationId
          - name: SNYK_SERVICE_ACCOUNT_API_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ .Values.monitorSecrets }}
                key: serviceAccountApiToken
                optional: true
          - name: SNYK_WATCH_NAMESPACE
            value: {{ include "snyk-monitor.scope" . }}
          - name: SNYK_DEPLOYMENT_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: SNYK_DEPLOYMENT_NAME
            value: {{ include "snyk-monitor.name" . }}
          - name: SNYK_INTEGRATION_API
            value: {{ .Values.integrationApi }}
          - name: SNYK_CLUSTER_NAME
            value: {{ .Values.clusterName }}
          - name: SNYK_MONITOR_VERSION
            value: {{ .Values.image.tag }}
          - name: HOME
            value: /srv/app
          - name: CLOUDSDK_CONFIG
            value: /var/tmp/gcloud
          - name: HTTP_PROXY
            value: {{ .Values.http_proxy }}
          - name: HTTPS_PROXY
            value: {{ .Values.https_proxy }}
          - name: NO_PROXY
            value: {{ .Values.no_proxy }}
          - name: USE_KEEPALIVE
            value: {{ quote .Values.use_keepalive }}
          - name: LOG_LEVEL
            value: {{ .Values.log_level }}
          - name: SKIP_K8S_JOBS
            value: {{ quote .Values.skip_k8s_jobs }}
          - name: SNYK_SKOPEO_COMPRESSION_LEVEL
            value: {{ quote .Values.skopeo.compression.level }}
          - name: SNYK_WORKERS_COUNT
            value: {{ quote .Values.workers.count }}
          - name: SNYK_SYSDIG_POLLING_INTERVAL_MINS
            value: {{ quote .Values.sysdig.pollingIntervalMins }}
          {{- if .Values.sysdig.enabled }}
          - name: SNYK_SYSDIG_RISK_SPOTLIGHT_TOKEN
            valueFrom:
              secretKeyRef:
                name: snyk-sysdig-secret
                key: token
                optional: true
          - name: SNYK_SYSDIG_ENDPOINT_URL
            valueFrom:
              secretKeyRef:
                name: snyk-sysdig-secret
                key: endpoint
                optional: true
          - name: SNYK_SYSDIG_CLUSTER_NAME
            valueFrom:
              secretKeyRef:
                name: snyk-sysdig-secret
                key: cluster
                optional: true
          - name: SNYK_SYSDIG_ENDPOINT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.sysdig.secretName }}
                key: endpoint
                optional: true
          - name: SNYK_SYSDIG_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ .Values.sysdig.secretName }}
                key: token
                optional: true
          {{- end }}
          {{- with .Values.envs }}
          {{- toYaml . | trim | nindent 10 -}}
          {{- end }}
          {{- with .Values.nodeEnvVars }}
          {{- toYaml . | trim | nindent 10 -}}
          {{- end }}
          {{- range $v := .Values.azureEnvVars }}
          {{- if $v.value }}
          - name: {{ $v.name }}
            value: {{ quote $v.value }}
          {{- end }}
          {{- end }}
          resources:
            {{- with .Values.requests }}
            requests:
              {{- toYaml . | nindent 14 }}
            {{- end }}
            {{- with .Values.limits }}
            limits:
              {{- toYaml . | nindent 14 }}
            {{- end }}
          livenessProbe:
            exec:
              command:
              - "true"
          readinessProbe:
            exec:
              command:
              - "true"
          {{- with .Values.snykMonitorSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: docker-config
          secret:
            secretName: {{ .Values.monitorSecrets }}
            optional: true
            items:
              - key: dockercfg.json
                path: config.json
        - name: temporary-storage
          {{- if .Values.pvc.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.pvc.name }}
          {{- else }}
          emptyDir:
            sizeLimit: {{ .Values.temporaryStorageSize }}
          {{- end }}
        - name: ssl-certs
          configMap:
            name: {{ .Values.certsConfigMap }}
            optional: true
        - name: workload-policies
          configMap:
            {{- if .Values.workloadPoliciesMap }}
            name: {{ .Values.workloadPoliciesMap }}
            {{- else }}
            name: {{ .Values.defaultWorkloadPoliciesMap }}
            {{- end }}
            optional: true
        {{- if .Values.volumes.projected.serviceAccountToken }}
        - name: token-vol
          projected:
            sources:
            - serviceAccountToken:
                path: token
        {{- end }}
        - name: registries-conf
          configMap:
            name: {{ .Values.registriesConfConfigMap }}
            optional: true
        {{- if .Values.excludedNamespaces }}
        - name: excluded-namespaces
          configMap:
            name: {{ .Release.Name }}-excluded-namespaces
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- toYaml .Values.extraVolumes | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
